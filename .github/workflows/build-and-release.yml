name: Build and Release Mobile Apps

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a new release"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      release_tag:
        description: "Release tag (required if creating release)"
        required: false
        type: string

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Java (for Android build)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Generate production config
        run: npm run prod-config

      - name: Build web app
        run: npm run build

      - name: Sync Capacitor
        run: npx cap sync

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease
          cd ..

      - name: Build iOS App (Archive)
        run: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath App.xcarchive \
            archive

          # Export IPA
          xcodebuild -exportArchive \
            -archivePath App.xcarchive \
            -exportPath . \
            -exportOptionsPlist ../../scripts/ExportOptions.plist
          cd ../..

      - name: Create ExportOptions.plist for iOS
        run: |
          mkdir -p scripts
          cat > scripts/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>\${{ secrets.APPLE_TEAM_ID }}</string>
              <key>compileBitcode</key>
              <false/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Rename artifacts
        run: |
          # Find and rename Android APK
          find android/app/build/outputs/apk/release -name "*.apk" -exec cp {} ./reddoor-android.apk \;

          # Find and rename iOS IPA
          find ios/App -name "*.ipa" -exec cp {} ./reddoor-ios.ipa \;

      - name: Create Release (if workflow_dispatch with create_release=true)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          release_name: Release ${{ github.event.inputs.release_tag }}
          draft: false
          prerelease: false

      - name: Get release info
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_OUTPUT
            echo "release_id=${{ github.event.release.id }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.create_release }}" = "true" ]; then
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
            echo "release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Android APK
        if: steps.release_info.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ./reddoor-android.apk
          asset_name: reddoor-android.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload iOS IPA
        if: steps.release_info.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ./reddoor-ios.ipa
          asset_name: reddoor-ios.ipa
          asset_content_type: application/octet-stream

      - name: Upload build artifacts (for manual download)
        uses: actions/upload-artifact@v4
        with:
          name: mobile-apps
          path: |
            reddoor-android.apk
            reddoor-ios.ipa
          retention-days: 30
